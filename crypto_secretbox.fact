// crypto_secretbox_MACBYTES = 16

void crypto_core_salsa20( // crypto_core_salsa in core_salsa_ref.c
    secret mut uint8[64] out,
    secret uint8[16] in,
    secret uint8[32] k) {
  public int32 rounds = 20;
  // TODO implement the actual bitshuffles
}

void crypto_core_hsalsa20(
    secret mut uint8[32] out,
    secret uint8[16] in,
    secret uint8[32] k) {
  // TODO implement the actual bitshuffles
}

public int32 crypto_stream_salsa20_xor_ic( // stream_ref_xor_ic in salsa20_ref.c
    public mut uint8[] c,
    secret uint8[] m,
    secret uint8[8] n,
    public uint64 ic_val,
    secret uint8[32] k) {
  if (len m == 0) {
    return 0;
  }
  public mut uint64 ic = ic_val;
  secret mut uint8[32] kcopy = arrcopy(k);
  public mut uint8[16] in = arrzeros(16);
  for (uint32 i = 0 to 8) {
    in[i] = n[i];
  }
  for (uint32 i = 8 to 16) {
    in[i] = ic & 0xff;
    ic >>= 8;
  }
  public uint32 mtimes = len m >> 6;
  secret mut uint8[64] block = arrzeros(64);
  for (uint32 j = 0 to mtimes) {
    crypto_core_salsa20(ref block, in, kcopy);
    public mut uint8[64] cview = arrview(c, j*64, 64);
    secret uint8[64] mview = arrview(m, j*64, 64);
    for (uint32 i = 0 to 64) {
      cview[i] = mview[i] ^ block[i];
    }
    public mut uint32 u = 1;
    for (uint32 i = 8 to 16) {
      u += (uint32)in[i];
      in[i] = u;
      u >>= 8;
    }
  }
  if (mtimes * 64 < len m) {
    public uint32 remain = len m - mtimes * 64;
    crypto_core_salsa20(ref block, in, kcopy);
    public mut uint8[64] cview = arrview(c, mtimes*64, 64); // XXX third param should be `remain`
    secret uint8[64] mview = arrview(m, mtimes*64, 64); // XXX third param should be `remain`
    for (uint32 i = 0 to remain) {
      cview[i] = mview[i] ^ block[i];
    }
  }
  fact_memzero(ref block);
  fact_memzero(ref kcopy);
  return 0;
}

public int32 crypto_stream_xsalsa20_xor_ic(
    public mut uint8[] c,
    secret uint8[] m,
    public uint8[16] n,
    public uint64 ic,
    secret uint8[32] k) {
  secret mut uint8[32] subkey = arrzeros(32);
  crypto_core_hsalsa20(ref subkey, n, k);
  public uint8[8] tmp = arrview(n, 16, 8);
  public int32 ret = crypto_stream_salsa20_xor_ic(ref c, m, tmp, ic, subkey);
  fact_memzero(ref subkey);
  return ret;
}

public int32 crypto_stream_xsalsa20_xor(
    public mut uint8[] c,
    secret uint8[] m,
    public uint8[16] n,
    secret uint8[32] k) {
  return crypto_stream_xsalsa20_xor_ic(ref c, m, n, 0, k);
}

public int32 crypto_secretbox_xsalsa20poly1305(
    public mut uint8[] c,
    secret uint8[] m,
    public uint8[16] n,
    secret uint8[32] k) {
  if (len m < 32) {
    return -1;
  }
  if (len c < 16 + len m) {
    return -1;
  }

  crypto_stream_xsalsa20_xor(ref c, m, n, k);
  crypto_onetimeauth_poly1305(c + 16, c + 32, mlen - 32, c);

  for (int32 i = 0 to 16) {
    c[i] = 0;
  }
  return 0;
}

public int32 crypto_secretbox(
    public mut uint8[] c,
    secret uint8[] m,
    public uint8[16] n,
    secret uint8[32] k) {
  return crypto_secretbox_xsalsa20poly1305(ref c, m, n, k);
}
