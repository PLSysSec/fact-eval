/* Copyright 2008, Google Inc.
 * All rights reserved.
 *
 * Code released into the public domain.
 *
 * curve25519-donna: Curve25519 elliptic curve, public key function
 *
 * http://code.google.com/p/curve25519-donna/
 *
 * Adam Langley <agl@imperialviolet.org>
 *
 * Derived from public domain C code by Daniel J. Bernstein <djb@cr.yp.to>
 *
 * More information about curve25519 can be found here
 *   http://cr.yp.to/ecdh.html
 *
 * djb's sample implementation of curve25519 is written in a special assembly
 * language called qhasm and uses the floating point registers.
 *
 * This is, almost, a clean room reimplementation from the curve25519 paper. It
 * uses many of the tricks described therein. Only the crecip function is taken
 * from the sample implementation.
 */

// typedef uint64_t limb;
// typedef uint64 felem[5];

/* Sum two numbers: output += in */
inline void
fsum(secret mut uint64[5] output, secret uint64[5] in) {
  output[0] += in[0];
  output[1] += in[1];
  output[2] += in[2];
  output[3] += in[3];
  output[4] += in[4];
}

/* Find the difference of two numbers: output = in - output
 * (note the order of the arguments!)
 *
 * Assumes that out[i] < 2**52
 * On return, out[i] < 2**55
 */
inline void
fdifference_backwards(secret mut uint64[5] out, secret uint64[5] in) {
  /* 152 is 19 << 3 */
  secret uint64 two54m152 = (((uint64)1) << 54) - 152;
  secret uint64 two54m8 = (((uint64)1) << 54) - 8;

  out[0] = in[0] + two54m152 - out[0];
  out[1] = in[1] + two54m8 - out[1];
  out[2] = in[2] + two54m8 - out[2];
  out[3] = in[3] + two54m8 - out[3];
  out[4] = in[4] + two54m8 - out[4];
}

/* Multiply a number by a scalar: output = in * scalar */
inline void
fscalar_product(secret mut uint64[5] output, secret uint64[5] in, secret uint64 scalar) {
  secret mut uint128 a = 0;

  a = ((uint128) in[0]) * scalar;
  output[0] = ((uint64)a) & 0x7ffffffffffff;

  a = ((uint128) in[1]) * scalar + ((uint64) (a >> 51));
  output[1] = ((uint64)a) & 0x7ffffffffffff;

  a = ((uint128) in[2]) * scalar + ((uint64) (a >> 51));
  output[2] = ((uint64)a) & 0x7ffffffffffff;

  a = ((uint128) in[3]) * scalar + ((uint64) (a >> 51));
  output[3] = ((uint64)a) & 0x7ffffffffffff;

  a = ((uint128) in[4]) * scalar + ((uint64) (a >> 51));
  output[4] = ((uint64)a) & 0x7ffffffffffff;

  output[0] += ((uint64)((a >> 51) * 19));
}

/* Multiply two numbers: output = in2 * in
 *
 * output must be distinct to both inputs. The inputs are reduced coefficient
 * form, the output is not.
 *
 * Assumes that in[i] < 2**55 and likewise for in2.
 * On return, output[i] < 2**52
 */
inline void
fmul(secret mut uint64[5] output, secret uint64[5] in2, secret uint64[5] in) {
  secret mut uint128[5] t = arrzeros(5);
  secret mut uint64 r0 = 0;
  secret mut uint64 r1 = 0;
  secret mut uint64 r2 = 0;
  secret mut uint64 r3 = 0;
  secret mut uint64 r4 = 0;
  secret mut uint64 s0 = 0;
  secret mut uint64 s1 = 0;
  secret mut uint64 s2 = 0;
  secret mut uint64 s3 = 0;
  secret mut uint64 s4 = 0;
  secret mut uint64 c = 0;

  r0 = in[0];
  r1 = in[1];
  r2 = in[2];
  r3 = in[3];
  r4 = in[4];

  s0 = in2[0];
  s1 = in2[1];
  s2 = in2[2];
  s3 = in2[3];
  s4 = in2[4];

  t[0]  =  ((uint128) r0) * s0;
  t[1]  =  ((uint128) r0) * s1 + ((uint128) r1) * s0;
  t[2]  =  ((uint128) r0) * s2 + ((uint128) r2) * s0 + ((uint128) r1) * s1;
  t[3]  =  ((uint128) r0) * s3 + ((uint128) r3) * s0 + ((uint128) r1) * s2 + ((uint128) r2) * s1;
  t[4]  =  ((uint128) r0) * s4 + ((uint128) r4) * s0 + ((uint128) r3) * s1 + ((uint128) r1) * s3 + ((uint128) r2) * s2;

  r4 *= 19;
  r1 *= 19;
  r2 *= 19;
  r3 *= 19;

  t[0] += ((uint128) r4) * s1 + ((uint128) r1) * s4 + ((uint128) r2) * s3 + ((uint128) r3) * s2;
  t[1] += ((uint128) r4) * s2 + ((uint128) r2) * s4 + ((uint128) r3) * s3;
  t[2] += ((uint128) r4) * s3 + ((uint128) r3) * s4;
  t[3] += ((uint128) r4) * s4;

                  r0 = (uint64)t[0] & 0x7ffffffffffff; c = (uint64)(t[0] >> 51);
  t[1] += c;      r1 = (uint64)t[1] & 0x7ffffffffffff; c = (uint64)(t[1] >> 51);
  t[2] += c;      r2 = (uint64)t[2] & 0x7ffffffffffff; c = (uint64)(t[2] >> 51);
  t[3] += c;      r3 = (uint64)t[3] & 0x7ffffffffffff; c = (uint64)(t[3] >> 51);
  t[4] += c;      r4 = (uint64)t[4] & 0x7ffffffffffff; c = (uint64)(t[4] >> 51);
  r0 +=   c * 19; c = r0 >> 51; r0 = r0 & 0x7ffffffffffff;
  r1 +=   c;      c = r1 >> 51; r1 = r1 & 0x7ffffffffffff;
  r2 +=   c;

  output[0] = r0;
  output[1] = r1;
  output[2] = r2;
  output[3] = r3;
  output[4] = r4;
}

inline void
fsquare_times(secret mut uint64[5] output, secret uint64[5] in, public uint64 count) {
  secret mut uint128[5] t = arrzeros(5);
  secret mut uint64 r0 = 0;
  secret mut uint64 r1 = 0;
  secret mut uint64 r2 = 0;
  secret mut uint64 r3 = 0;
  secret mut uint64 r4 = 0;
  secret mut uint64 c = 0;
  secret mut uint64 d0 = 0;
  secret mut uint64 d1 = 0;
  secret mut uint64 d2 = 0;
  secret mut uint64 d4 = 0;
  secret mut uint64 d419 = 0;

  r0 = in[0];
  r1 = in[1];
  r2 = in[2];
  r3 = in[3];
  r4 = in[4];

  for (uint64 i = 0; i < count; i += 1) {
    d0 = r0 * 2;
    d1 = r1 * 2;
    d2 = r2 * 2 * 19;
    d419 = r4 * 19;
    d4 = d419 * 2;

    t[0] = ((uint128) r0) * r0 + ((uint128) d4) * r1 + (((uint128) d2) * (r3     ));
    t[1] = ((uint128) d0) * r1 + ((uint128) d4) * r2 + (((uint128) r3) * (r3 * 19));
    t[2] = ((uint128) d0) * r2 + ((uint128) r1) * r1 + (((uint128) d4) * (r3     ));
    t[3] = ((uint128) d0) * r3 + ((uint128) d1) * r2 + (((uint128) r4) * (d419   ));
    t[4] = ((uint128) d0) * r4 + ((uint128) d1) * r3 + (((uint128) r2) * (r2     ));

                    r0 = (uint64)t[0] & 0x7ffffffffffff; c = (uint64)(t[0] >> 51);
    t[1] += c;      r1 = (uint64)t[1] & 0x7ffffffffffff; c = (uint64)(t[1] >> 51);
    t[2] += c;      r2 = (uint64)t[2] & 0x7ffffffffffff; c = (uint64)(t[2] >> 51);
    t[3] += c;      r3 = (uint64)t[3] & 0x7ffffffffffff; c = (uint64)(t[3] >> 51);
    t[4] += c;      r4 = (uint64)t[4] & 0x7ffffffffffff; c = (uint64)(t[4] >> 51);
    r0 +=   c * 19; c = r0 >> 51; r0 = r0 & 0x7ffffffffffff;
    r1 +=   c;      c = r1 >> 51; r1 = r1 & 0x7ffffffffffff;
    r2 +=   c;
  }

  output[0] = r0;
  output[1] = r1;
  output[2] = r2;
  output[3] = r3;
  output[4] = r4;
}

/* Load a little-endian 64-bit number  */
secret uint64
load_limb(secret uint8[8] in) {
  return
    ((uint64)in[0]) |
    (((uint64)in[1]) << 8) |
    (((uint64)in[2]) << 16) |
    (((uint64)in[3]) << 24) |
    (((uint64)in[4]) << 32) |
    (((uint64)in[5]) << 40) |
    (((uint64)in[6]) << 48) |
    (((uint64)in[7]) << 56);
}

void
store_limb(secret mut uint8[8] out, secret uint64 in) {
  out[0] = in & 0xff;
  out[1] = (in >> 8) & 0xff;
  out[2] = (in >> 16) & 0xff;
  out[3] = (in >> 24) & 0xff;
  out[4] = (in >> 32) & 0xff;
  out[5] = (in >> 40) & 0xff;
  out[6] = (in >> 48) & 0xff;
  out[7] = (in >> 56) & 0xff;
}

/* Take a little-endian, 32-byte number and expand it into polynomial form */
void
fexpand(secret mut uint64[5] output, secret uint8[32] in) {
  output[0] = load_limb(arrview(in, 0, 8)) & 0x7ffffffffffff;
  output[1] = (load_limb(arrview(in, 6, 8)) >> 3) & 0x7ffffffffffff;
  output[2] = (load_limb(arrview(in, 12, 8)) >> 6) & 0x7ffffffffffff;
  output[3] = (load_limb(arrview(in, 19, 8)) >> 1) & 0x7ffffffffffff;
  output[4] = (load_limb(arrview(in, 24, 8)) >> 12) & 0x7ffffffffffff;
}

/* Take a fully reduced polynomial form number and contract it into a
 * little-endian, 32-byte array
 */
void
fcontract(secret mut uint8[32] output, secret uint64[5] input) {
  secret mut uint128[5] t = arrzeros(5);

  t[0] = input[0];
  t[1] = input[1];
  t[2] = input[2];
  t[3] = input[3];
  t[4] = input[4];

  t[1] += t[0] >> 51; t[0] &= 0x7ffffffffffff;
  t[2] += t[1] >> 51; t[1] &= 0x7ffffffffffff;
  t[3] += t[2] >> 51; t[2] &= 0x7ffffffffffff;
  t[4] += t[3] >> 51; t[3] &= 0x7ffffffffffff;
  t[0] += 19 * (t[4] >> 51); t[4] &= 0x7ffffffffffff;

  t[1] += t[0] >> 51; t[0] &= 0x7ffffffffffff;
  t[2] += t[1] >> 51; t[1] &= 0x7ffffffffffff;
  t[3] += t[2] >> 51; t[2] &= 0x7ffffffffffff;
  t[4] += t[3] >> 51; t[3] &= 0x7ffffffffffff;
  t[0] += 19 * (t[4] >> 51); t[4] &= 0x7ffffffffffff;

  /* now t is between 0 and 2^255-1, properly carried. */
  /* case 1: between 0 and 2^255-20. case 2: between 2^255-19 and 2^255-1. */

  t[0] += 19;

  t[1] += t[0] >> 51; t[0] &= 0x7ffffffffffff;
  t[2] += t[1] >> 51; t[1] &= 0x7ffffffffffff;
  t[3] += t[2] >> 51; t[2] &= 0x7ffffffffffff;
  t[4] += t[3] >> 51; t[3] &= 0x7ffffffffffff;
  t[0] += 19 * (t[4] >> 51); t[4] &= 0x7ffffffffffff;

  /* now between 19 and 2^255-1 in both cases, and offset by 19. */

  t[0] += 0x8000000000000 - 19;
  t[1] += 0x8000000000000 - 1;
  t[2] += 0x8000000000000 - 1;
  t[3] += 0x8000000000000 - 1;
  t[4] += 0x8000000000000 - 1;

  /* now between 2^255 and 2^256-20, and offset by 2^255. */

  t[1] += t[0] >> 51; t[0] &= 0x7ffffffffffff;
  t[2] += t[1] >> 51; t[1] &= 0x7ffffffffffff;
  t[3] += t[2] >> 51; t[2] &= 0x7ffffffffffff;
  t[4] += t[3] >> 51; t[3] &= 0x7ffffffffffff;
  t[4] &= 0x7ffffffffffff;

  store_limb(ref arrview(output, 0, 8),  ((uint64) (t[0]        | (t[1] << 51))));
  store_limb(ref arrview(output, 8, 8),  ((uint64)((t[1] >> 13) | (t[2] << 38))));
  store_limb(ref arrview(output, 16, 8), ((uint64)((t[2] >> 26) | (t[3] << 25))));
  store_limb(ref arrview(output, 24, 8), ((uint64)((t[3] >> 39) | (t[4] << 12))));
}

/* Input: Q, Q', Q-Q'
 * Output: 2Q, Q+Q'
 *
 *   x2 z3: long form
 *   x3 z3: long form
 *   x z: short form, destroyed
 *   xprime zprime: short form, destroyed
 *   qmqp: short form, preserved
 */
void
fmonty(secret mut uint64[5] x2, secret mut uint64[5] z2, /* output 2Q */
       secret mut uint64[5] x3, secret mut uint64[5] z3, /* output Q + Q' */
       secret mut uint64[5] x,  secret mut uint64[5] z,   /* input Q */
       secret mut uint64[5] xprime, secret mut uint64[5] zprime, /* input Q' */
       secret uint64[5] qmqp /* input Q - Q' */) {
  secret mut uint64[5] origx = arrcopy(x);
  secret mut uint64[5] origxprime = arrcopy(xprime);
  secret mut uint64[5] zzz = arrzeros(5);
  secret mut uint64[5] xx = arrzeros(5);
  secret mut uint64[5] zz = arrzeros(5);
  secret mut uint64[5] xxprime = arrzeros(5);
  secret mut uint64[5] zzprime = arrzeros(5);
  secret mut uint64[5] zzzprime = arrzeros(5);

  fsum(ref x, z);
  fdifference_backwards(ref z, origx);  // does x - z

  fsum(ref xprime, zprime);
  fdifference_backwards(ref zprime, origxprime);
  fmul(ref xxprime, xprime, z);
  fmul(ref zzprime, x, zprime);

  for (uint32 i = 0; i < 5; i += 1) {
    origxprime[i] = xxprime[i];
  }

  fsum(ref xxprime, zzprime);
  fdifference_backwards(ref zzprime, origxprime);
  fsquare_times(ref x3, xxprime, 1);
  fsquare_times(ref zzzprime, zzprime, 1);
  fmul(ref z3, zzzprime, qmqp);

  fsquare_times(ref xx, x, 1);
  fsquare_times(ref zz, z, 1);
  fmul(ref x2, xx, zz);
  fdifference_backwards(ref zz, xx);  // does zz = xx - zz
  fscalar_product(ref zzz, zz, 121665);
  fsum(ref zzz, xx);
  fmul(ref z2, zz, zzz);
}

// -----------------------------------------------------------------------------
// Maybe swap the contents of two uint64 arrays (@a and @b), each @len elements
// long. Perform the swap iff @swap is non-zero.
//
// This function performs the swap without leaking any side-channel
// information.
// -----------------------------------------------------------------------------
inline
void
swap_conditional(secret mut uint64[5] a, secret mut uint64[5] b, secret uint64 swapi) {
  if (swapi == 1) {
    for (uint32 i = 0; i < 5; i += 1) {
      secret uint64 x = a[i];
      a[i] = b[i];
      b[i] = x;
    }
  }
}

/* Calculates nQ where Q is the x-coordinate of a point on the curve
 *
 *   resultx/resultz: the x coordinate of the resulting curve point (short form)
 *   n: a little endian, 32-byte number
 *   q: a point of the curve (short form)
 */
void
cmult(secret mut uint64[5] resultx, secret mut uint64[5] resultz, secret uint8[32] n, secret uint64[5] q) {
  secret mut uint64[5] a = arrzeros(5);
  secret mut uint64[5] b = arrzeros(5);
  secret mut uint64[5] c = arrzeros(5);
  secret mut uint64[5] d = arrzeros(5);
  secret mut uint64[5] e = arrzeros(5);
  secret mut uint64[5] f = arrzeros(5);
  secret mut uint64[5] g = arrzeros(5);
  secret mut uint64[5] h = arrzeros(5);
  b[0] = 1;
  c[0] = 1;
  f[0] = 1;
  h[0] = 1;
  //uint64 *nqpqx = a, *nqpqz = b, *nqx = c, *nqz = d, *t;
  //uint64 *nqpqx2 = e, *nqpqz2 = f, *nqx2 = g, *nqz2 = h;

  for (uint32 i = 0; i < 5; i += 1) {
    a[i] = q[i];
  }

  for (uint32 i = 0; i < 32; i += 1) {
    secret mut uint8 byte = n[31 - i];
    for (uint32 j = 0; j < 8; j += 1) {
      secret uint64 bit = byte >> 7;

      if ((j & 1) == 0) {
        swap_conditional(ref c, ref a, bit);
        swap_conditional(ref d, ref b, bit);
        fmonty(ref g, ref h,
            ref e, ref f,
            ref c, ref d,
            ref a, ref b,
            q);
        swap_conditional(ref g, ref e, bit);
        swap_conditional(ref h, ref f, bit);
      } else {
        swap_conditional(ref g, ref e, bit);
        swap_conditional(ref h, ref f, bit);
        fmonty(ref c, ref d,
            ref a, ref b,
            ref g, ref h,
            ref e, ref f,
            q);
        swap_conditional(ref c, ref a, bit);
        swap_conditional(ref d, ref b, bit);
      }

      byte <<= 1;
    }
  }

  for (uint32 i = 0; i < 5; i += 1) {
    resultx[i] = c[i];
    resultz[i] = d[i];
  }
}


// -----------------------------------------------------------------------------
// Shamelessly copied from djb's code, tightened a little
// -----------------------------------------------------------------------------
void
crecip(secret mut uint64[5] out, secret uint64[5] z) {
  secret mut uint64[5] a = arrzeros(5);
  secret mut uint64[5] t0 = arrzeros(5);
  secret mut uint64[5] b = arrzeros(5);
  secret mut uint64[5] c = arrzeros(5);

  /* 2 */ fsquare_times(ref a, z, 1); // a = 2
  /* 8 */ fsquare_times(ref t0, a, 2);
  /* 9 */ fmul(ref b, t0, z); // b = 9
  /* 11 */ fmul(ref a, b, a); // a = 11
  /* 22 */ fsquare_times(ref t0, a, 1);
  /* 2^5 - 2^0 = 31 */ fmul(ref b, t0, b);
  /* 2^10 - 2^5 */ fsquare_times(ref t0, b, 5);
  /* 2^10 - 2^0 */ fmul(ref b, t0, b);
  /* 2^20 - 2^10 */ fsquare_times(ref t0, b, 10);
  /* 2^20 - 2^0 */ fmul(ref c, t0, b);
  /* 2^40 - 2^20 */ fsquare_times(ref t0, c, 20);
  /* 2^40 - 2^0 */ fmul(ref t0, t0, c);
  /* 2^50 - 2^10 */ fsquare_times(ref t0, t0, 10);
  /* 2^50 - 2^0 */ fmul(ref b, t0, b);
  /* 2^100 - 2^50 */ fsquare_times(ref t0, b, 50);
  /* 2^100 - 2^0 */ fmul(ref c, t0, b);
  /* 2^200 - 2^100 */ fsquare_times(ref t0, c, 100);
  /* 2^200 - 2^0 */ fmul(ref t0, t0, c);
  /* 2^250 - 2^50 */ fsquare_times(ref t0, t0, 50);
  /* 2^250 - 2^0 */ fmul(ref t0, t0, b);
  /* 2^255 - 2^5 */ fsquare_times(ref t0, t0, 5);
  /* 2^255 - 21 */ fmul(ref out, t0, a);
}

export
public int32
curve25519_donna(secret mut uint8[32] mypublic, secret uint8[32] _secret, secret uint8[32] basepoint) {
  secret mut uint64[5] bp = arrzeros(5);
  secret mut uint64[5] x = arrzeros(5);
  secret mut uint64[5] z = arrzeros(5);
  secret mut uint64[5] zmone = arrzeros(5);
  secret mut uint8[32] e = arrcopy(_secret);

  e[0] &= 248;
  e[31] &= 127;
  e[31] |= 64;

  fexpand(ref bp, basepoint);
  cmult(ref x, ref z, e, bp);
  crecip(ref zmone, z);
  fmul(ref z, x, zmone);
  fcontract(ref mypublic, z);
  return 0;
}
