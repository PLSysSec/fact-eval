void _fact_memzero(secret mut uint8[] buf) {
  for (uint32 i = 0 to len buf) {
    buf[i] = 0;
  }
}

void _fact_memzero64(secret mut uint64[] buf) {
  for (uint32 i = 0 to len buf) {
    buf[i] = 0;
  }
}

//a public version of _fact_memzero64
void _fact_memzero64_public(public mut uint64[] buf) {
  for (uint32 i = 0 to len buf) {
    buf[i] = 0;
  }
}

void _memcpy(secret mut uint8[] dst, secret uint8[] src) {
  for (uint64 i = 0 to len src) {
    dst[i] = src[i];
  }
}

//a public version of _memcpy_public
void _memcpy_public(public mut uint8[] dst, public uint8[] src) {
  for (uint64 i = 0 to len src) {
    dst[i] = src[i];
  }
}

inline secret bool _crypto_verify_16(secret uint8[16] x, secret uint8[16] y) {
  for (uint32 i = 0 to 16) {
    if (x[i] != y[i]) {
      return false;
    }
  }
  return true;
}

inline void _partial64_copy(public uint64[] src, public mut uint64[] dst, 
                              public uint64 offset) {
  for(uint64 i = 0 to len dst) {
    dst[i] = src[offset + i];
  }
}
