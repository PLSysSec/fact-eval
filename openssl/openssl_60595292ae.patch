diff --git a/apps/s_server.c b/apps/s_server.c
index c772069a7c..96bb29bd7f 100644
--- a/apps/s_server.c
+++ b/apps/s_server.c
@@ -2096,8 +2096,8 @@ int s_server_main(int argc, char *argv[])
     if (max_early_data >= 0)
         SSL_CTX_set_max_early_data(ctx, max_early_data);
 
-    BIO_printf(bio_s_out, "ACCEPT\n");
-    (void)BIO_flush(bio_s_out);
+    //BIO_printf(bio_s_out, "ACCEPT\n");
+    //(void)BIO_flush(bio_s_out);
     if (rev)
         server_cb = rev_body;
     else if (www)
@@ -2674,9 +2674,9 @@ static int sv_body(int s, int stype, int prot, unsigned char *context)
     }
     BIO_printf(bio_s_out, "CONNECTION CLOSED\n");
     OPENSSL_clear_free(buf, bufsize);
-    if (ret >= 0)
-        BIO_printf(bio_s_out, "ACCEPT\n");
-    (void)BIO_flush(bio_s_out);
+    //if (ret >= 0)
+        //BIO_printf(bio_s_out, "ACCEPT\n");
+    //(void)BIO_flush(bio_s_out);
     return ret;
 }
 
@@ -3285,8 +3285,8 @@ static int www_body(int s, int stype, int prot, unsigned char *context)
     SSL_set_shutdown(con, SSL_SENT_SHUTDOWN | SSL_RECEIVED_SHUTDOWN);
 
  err:
-    if (ret >= 0)
-        BIO_printf(bio_s_out, "ACCEPT\n");
+    //if (ret >= 0)
+        //BIO_printf(bio_s_out, "ACCEPT\n");
     OPENSSL_free(buf);
     BIO_free_all(io);
     return ret;
diff --git a/apps/s_time.c b/apps/s_time.c
index 149107c554..bef72f5a30 100644
--- a/apps/s_time.c
+++ b/apps/s_time.c
@@ -264,8 +264,8 @@ int s_time_main(int argc, char **argv)
             else
                 ver = '*';
         }
-        fputc(ver, stdout);
-        fflush(stdout);
+        //fputc(ver, stdout);
+        //fflush(stdout);
 
         SSL_free(scon);
         scon = NULL;
@@ -356,8 +356,8 @@ int s_time_main(int argc, char **argv)
             else
                 ver = '*';
         }
-        fputc(ver, stdout);
-        fflush(stdout);
+        //fputc(ver, stdout);
+        //fflush(stdout);
     }
     totalTime += tm_Time_F(STOP); /* Add the time for this iteration */
 
diff --git a/ssl/build.info b/ssl/build.info
index bb2f1deb53..f9de1ff318 100644
--- a/ssl/build.info
+++ b/ssl/build.info
@@ -3,7 +3,7 @@ SOURCE[../libssl]=\
         pqueue.c packet.c \
         statem/statem_srvr.c statem/statem_clnt.c  s3_lib.c  s3_enc.c record/rec_layer_s3.c \
         statem/statem_lib.c statem/extensions.c statem/extensions_srvr.c \
-        statem/extensions_clnt.c statem/extensions_cust.c s3_cbc.c s3_msg.c \
+        statem/extensions_clnt.c statem/extensions_cust.c s3_cbc.c __s3_cbc.c _s3_cbc.s s3_msg.c \
         methods.c   t1_lib.c  t1_enc.c tls13_enc.c \
         d1_lib.c  record/rec_layer_d1.c d1_msg.c \
         statem/statem_dtls.c d1_srtp.c \
diff --git a/ssl/s3_cbc.c b/ssl/s3_cbc.c
index 7d9c377697..42412037d7 100644
--- a/ssl/s3_cbc.c
+++ b/ssl/s3_cbc.c
@@ -13,6 +13,7 @@
 
 #include <openssl/md5.h>
 #include <openssl/sha.h>
+#include "fact_s3_cbc.h"
 
 /*
  * MAX_HASH_BIT_COUNT_BYTES is the maximum number of bytes in the hash's
@@ -141,7 +142,7 @@ int ssl3_cbc_digest_record(const EVP_MD_CTX *ctx,
     } md_state;
     void (*md_final_raw) (void *ctx, unsigned char *md_out);
     void (*md_transform) (void *ctx, const unsigned char *block);
-    size_t md_size, md_block_size = 64;
+    size_t md_size, md_block_size = 64, log_md_block_size = 6;
     size_t sslv3_pad_length = 40, header_length, variance_blocks,
         len, max_mac_bytes, num_blocks,
         num_starting_blocks, k, mac_end_offset, c, index_a, index_b;
@@ -161,6 +162,7 @@ int ssl3_cbc_digest_record(const EVP_MD_CTX *ctx,
     size_t md_length_size = 8;
     char length_is_big_endian = 1;
     int ret;
+    uint32_t start, final;
 
     /*
      * This is a, hopefully redundant, check that allows us to forget about
@@ -169,6 +171,7 @@ int ssl3_cbc_digest_record(const EVP_MD_CTX *ctx,
     if (!ossl_assert(data_plus_mac_plus_padding_size < 1024 * 1024))
         return 0;
 
+    int sha_type = EVP_MD_CTX_type(ctx);
     switch (EVP_MD_CTX_type(ctx)) {
     case NID_md5:
         if (MD5_Init((MD5_CTX *)md_state.c) <= 0)
@@ -212,6 +215,7 @@ int ssl3_cbc_digest_record(const EVP_MD_CTX *ctx,
             (void (*)(void *ctx, const unsigned char *block))SHA512_Transform;
         md_size = 384 / 8;
         md_block_size = 128;
+        log_md_block_size = 7;
         md_length_size = 16;
         break;
     case NID_sha512:
@@ -222,6 +226,7 @@ int ssl3_cbc_digest_record(const EVP_MD_CTX *ctx,
             (void (*)(void *ctx, const unsigned char *block))SHA512_Transform;
         md_size = 64;
         md_block_size = 128;
+        log_md_block_size = 7;
         md_length_size = 16;
         break;
     default:
@@ -239,6 +244,33 @@ int ssl3_cbc_digest_record(const EVP_MD_CTX *ctx,
             || !ossl_assert(md_size <= EVP_MAX_MD_SIZE))
         return 0;
 
+    start = OPENSSL_rdtsc();
+#ifdef __S3_CBC_H
+    memset(mac_out, 0, sizeof(mac_out));
+    memset(hmac_pad, 0, md_block_size);
+
+    __ssl3_cbc_digest_record(
+        // outputs
+            md_state.c,
+            mac_out,
+            hmac_pad,
+        // parameters
+            md_size,
+            md_block_size,
+            log_md_block_size,
+            sslv3_pad_length,
+            md_length_size,
+            length_is_big_endian,
+            sha_type,
+        // inputs
+            header,
+            data,
+            data_plus_mac_plus_padding_size,
+            data_plus_mac_size,
+            mac_secret,
+            mac_secret_length,
+            is_sslv3);
+#else
     header_length = 13;
     if (is_sslv3) {
         header_length = mac_secret_length + sslv3_pad_length + 8 /* sequence
@@ -450,6 +482,9 @@ int ssl3_cbc_digest_record(const EVP_MD_CTX *ctx,
         for (j = 0; j < md_size; j++)
             mac_out[j] |= block[j] & is_block_b;
     }
+#endif
+    final = OPENSSL_rdtsc();
+    printf("time taken: %u\n", final - start);
 
     md_ctx = EVP_MD_CTX_new();
     if (md_ctx == NULL)
