/*

typedef struct ssl3_record_st {
    int rec_version;
    int type;
    size_t length;
    size_t orig_len;
    size_t off;
    usigned char *data;
    unsigned char *input;
    unsigned char *comp;
    unsigned int read;
    unsigned long epoch;
    unsigned char seq_num[SEQ_NUM_SIZE]
} SSL3_RECORD
*/

// this port version is a semi-direct translate
// public value assigned to secret value
int32 ssl3_cbc_remove_padding( 
    // SSL3_RECORD struct
    public int16 rec_version,
    public int16 rec_type,
    secret mut uint32 rec_length,
    secret uint32 rec_orig_len,
    secret uint8[] rec_data,
    secret uint8[] rec_input,
    secret uint8[] rec_comp,
    public uint16 rec_read,
    public uint32 rec_epoch,
    public uint8[8] seq_num,

    // public rec->length
    public uint32 length,

    public uint32 block_size,
    public uint32 mac_size) {

    secret mut uint32 padding_length = 0;
    secret mut uint32 good = 0;
    public uint32 overhead = 1 + mac_size;

    // test public lengths in non-constant time
    if(overhead > length) {
        return 0;
    }

    padding_length = rec_data[length - 1];
    if((length < (padding_length + overhead)) || (block_size < padding_length + 1)) {
        good = 0;
    } else {
        good = 0xFFFFFFFF;
    }

    if(good != 0) {
        length = reclength - (padding_length + 1);
        return 1;
    } else {
        return -1;
    }
}


// this is a simplified version 
int32 ssl3_cbc_remove_padding_smp( 
    // SSL3_RECORD struct
    public int16 rec_version,
    public int16 type,
    secret mut uint32 length,
    secret uint32 orig_len,
    secret uint8[] data,
    secret uint8[] input,
    secret uint8[] comp,
    public uint16 read,
    public uint32 epoch,
    public uint8[8] seq_num,

    // public rec->length
    public uint32 reclength,

    public uint32 block_size,
    public uint32 mac_size) {
    
    secret mut uint32 padding_length = 0;
    public uint32 overhead = 1 + mac_size;

    if(overhead > length) {
        return 0;
    }

    padding_length = data[length - 1];
    if(reclength >= (padding_length + overhead) && (block_size >= padding_length + 1)) {
        length = reclength - (padding_length + 1);
        return 1;
    } else {
        return -1;
    }
}

/*
    crypto/evp/evp_lib.c line 196`
    unsigned long EVP_CIPHER_flags(const EVP_CIPHER *cipher)
 */

/*
    crypto/evp/evp_lib.c
    const EVP_CIPHER *EVP_CIPHER_CTX_cipher(const EVP_CIPHER_CTX *ctx)
 */

/*
    struct evp_cipher_ctx_st defined in openssl/crypto/evp/evp_locl.h
 */

/*
 *  openssl/crypto/include/internal/evp_int.h
 *  struct evp_cipher_st
 */

/*
    SSL struct(ssl/ssl_local.h line978) contains 
    SSL_METHOD struct (ssl/ssl_local.h line 450)
    SSL_METHOD contains struct ssl3_enc_method (ssl/ssl_local.h line 1741)
 */

int32 tls1_cbc_remove_padding(
    /* 
        struct SSL, but we only need some flags
        s->ssl_method->ssl_enc->enc_flags (uint32_t enc_flags)
     */
    public uint32 enc_flags,
    public uint64 evp_cipher_flags,
    // struct SSL3_RECORD
    public int16 rec_version,
    public int16 type,
    secret mut uint8 length,
    public mut uint32 orig_len,         // what is orig_len? should it be public?
    secret uint8[] data,
    secret uint8[] input,
    secret uint8[] comp,
    public uint16 read,
    public uint32 epoch,
    public uint8[8] seq_num,
    ////////////
    public mut uint32 reclength,    // this padded record length is public
    public uint32 block_size,
    public uint32 mac_size) {

    public uint32 EVP_CIPH_FLAG_AEAD_CIPHER = 0x200000;
    public uint32 SSL_ENC_FLAG_EXPLICIT_IV = 0x1;

    secret mut uint32 good = 0;
    secret mut uint8 padding_length = 0;
    public uint32 overhead = 1 + mac_size;

    secret mut uint32 data_ptr = 0;
    secret mut uint32 input_ptr = 0;

    if((enc_flags & SSL_ENC_FLAG_EXPLICIT_IV) != 0) {
        if(overhead + block_size > reclength) {
            return 0;
        }
        //length -= (uint8)block_size;
        
        // skip explicit IV
        // data is a pointer
        data_ptr += block_size;     
        input_ptr += block_size;
        reclength -= block_size;
        // not sure how to handle the following line
        orig_len -= block_size;

        length -= (uint8)block_size;
    } else if(overhead > reclength) {
        return 0;
    }

    padding_length = data[data_ptr + length - 1];

    if((evp_cipher_flags & EVP_CIPH_FLAG_AEAD_CIPHER) != 0) {
        length -= padding_length + 1;
        return 1;
    }

    if(length >= overhead + padding_length) {
        good = 0xFFFFFFFF;
    }

    public mut uint8 to_check = 256;
    if(to_check > reclength) {
        to_check = (uint8)reclength;
    }

    for(uint8 i = 0 to to_check) {
        secret uint8 mask = 0;
        if(i < padding_length) {
            // here we need to add data_ptr to the offset in case
            // data pointer has been changed
            secret uint8 b = data[data_ptr + length - 1 - i];
            // final |padding_length+1| bytes should have value
            // |padding_length|
            if(b == padding_length) {
                good = good;
            } else {
                good = 0;
            }
        }
    }

    if(good != 0) {
        length -= (padding_length + 1);
        return 1;
    } else {
        return -1;
    }
}
