secret uint32 rotl32(secret uint32 x, public int32 b) {
  return (x << b) | (x >> (32 - b));
}

secret uint32 load32_le(secret uint8[4] src) {
  secret mut uint32 w = (uint32) src[0];
  w |= (uint32) src[1] <<  8;
  w |= (uint32) src[2] << 16;
  w |= (uint32) src[3] << 24;
  return w;
}

void store32_le(secret mut uint8[4] dst, secret uint32 w) {
  dst[0] = (uint8)(w);
  dst[1] = (uint8)(w >> 8);
  dst[2] = (uint8)(w >> 16);
  dst[3] = (uint8)(w >> 24);
}

void fact_crypto_core_salsa20( // crypto_core_salsa in core_salsa_ref.c
    secret mut uint8[64] out,
    secret uint8[16] in,
    secret uint8[32] k) {
  secret mut uint32 x0 = 0x61707865;
  secret mut uint32 x5 = 0x3320646e;
  secret mut uint32 x10 = 0x79622d32;
  secret mut uint32 x15 = 0x6b206574;

  secret uint32 j0 = x0;
  secret uint32 j5 = x5;
  secret uint32 j10 = x10;
  secret uint32 j15 = x15;

  secret mut uint32 x1 = load32_le(arrview(k, 0, 4));
  secret mut uint32 x2 = load32_le(arrview(k, 4, 4));
  secret mut uint32 x3 = load32_le(arrview(k, 8, 4));
  secret mut uint32 x4 = load32_le(arrview(k, 12, 4));
  secret mut uint32 x11 = load32_le(arrview(k, 16, 4));
  secret mut uint32 x12 = load32_le(arrview(k, 20, 4));
  secret mut uint32 x13 = load32_le(arrview(k, 24, 4));
  secret mut uint32 x14 = load32_le(arrview(k, 28, 4));

  secret uint32 j1 = x1;
  secret uint32 j2 = x2;
  secret uint32 j3 = x3;
  secret uint32 j4 = x4;
  secret uint32 j11 = x11;
  secret uint32 j12 = x12;
  secret uint32 j13 = x13;
  secret uint32 j14 = x14;

  secret mut uint32 x6 = load32_le(arrview(in, 0, 4));
  secret mut uint32 x7 = load32_le(arrview(in, 4, 4));
  secret mut uint32 x8 = load32_le(arrview(in, 8, 4));
  secret mut uint32 x9 = load32_le(arrview(in, 12, 4));

  secret uint32 j6 = x6;
  secret uint32 j7 = x7;
  secret uint32 j8 = x8;
  secret uint32 j9 = x9;

  for (uint32 i = 0 to 10) {
    x4  ^= rotl32(x0  + x12, 7 );
    x8  ^= rotl32(x4  + x0 , 9 );
    x12 ^= rotl32(x8  + x4 , 13);
    x0  ^= rotl32(x12 + x8 , 18);
    x9  ^= rotl32(x5  + x1 , 7 );
    x13 ^= rotl32(x9  + x5 , 9 );
    x1  ^= rotl32(x13 + x9 , 13);
    x5  ^= rotl32(x1  + x13, 18);
    x14 ^= rotl32(x10 + x6 , 7 );
    x2  ^= rotl32(x14 + x10, 9 );
    x6  ^= rotl32(x2  + x14, 13);
    x10 ^= rotl32(x6  + x2 , 18);
    x3  ^= rotl32(x15 + x11, 7 );
    x7  ^= rotl32(x3  + x15, 9 );
    x11 ^= rotl32(x7  + x3 , 13);
    x15 ^= rotl32(x11 + x7 , 18);
    x1  ^= rotl32(x0  + x3 , 7 );
    x2  ^= rotl32(x1  + x0 , 9 );
    x3  ^= rotl32(x2  + x1 , 13);
    x0  ^= rotl32(x3  + x2 , 18);
    x6  ^= rotl32(x5  + x4 , 7 );
    x7  ^= rotl32(x6  + x5 , 9 );
    x4  ^= rotl32(x7  + x6 , 13);
    x5  ^= rotl32(x4  + x7 , 18);
    x11 ^= rotl32(x10 + x9 , 7 );
    x8  ^= rotl32(x11 + x10, 9 );
    x9  ^= rotl32(x8  + x11, 13);
    x10 ^= rotl32(x9  + x8 , 18);
    x12 ^= rotl32(x15 + x14, 7 );
    x13 ^= rotl32(x12 + x15, 9 );
    x14 ^= rotl32(x13 + x12, 13);
    x15 ^= rotl32(x14 + x13, 18);
  }

  store32_le(ref arrview(out,  0, 4), x0  + j0 );
  store32_le(ref arrview(out,  4, 4), x1  + j1 );
  store32_le(ref arrview(out,  8, 4), x2  + j2 );
  store32_le(ref arrview(out, 12, 4), x3  + j3 );
  store32_le(ref arrview(out, 16, 4), x4  + j4 );
  store32_le(ref arrview(out, 20, 4), x5  + j5 );
  store32_le(ref arrview(out, 24, 4), x6  + j6 );
  store32_le(ref arrview(out, 28, 4), x7  + j7 );
  store32_le(ref arrview(out, 32, 4), x8  + j8 );
  store32_le(ref arrview(out, 36, 4), x9  + j9 );
  store32_le(ref arrview(out, 40, 4), x10 + j10);
  store32_le(ref arrview(out, 44, 4), x11 + j11);
  store32_le(ref arrview(out, 48, 4), x12 + j12);
  store32_le(ref arrview(out, 52, 4), x13 + j13);
  store32_le(ref arrview(out, 56, 4), x14 + j14);
  store32_le(ref arrview(out, 60, 4), x15 + j15);
}
